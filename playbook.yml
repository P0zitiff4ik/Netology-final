---
- name: Configure Kubernetes resources post cluster creation
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    kubeconfig_file: "{{ playbook_dir }}/kubeconfig.yaml" # Определяем путь к файлу kubeconfig.yaml относительно playbook
    kube_prometheus_manifests: "{{ playbook_dir }}/k8s/kube-prometheus/manifests" # Каталог манифестов Prometheus Operator (kube-prometheus)
    app_manifests_dir: "{{ playbook_dir }}/k8s" # Каталог общих манифестов приложения (исключая kube-prometheus)
  tasks:
    # Проверяем наличие файла конфигурации kubectl
    - name: Check that kubeconfig.yaml file exists
      ansible.builtin.stat:
        path: "{{ kubeconfig_file }}"
      register: kubeconfig_stat

    - name: Fail if kubeconfig.yaml not found
      ansible.builtin.fail:
        msg: "Файл kubeconfig.yaml не найден в директории {{ playbook_dir }}"
      when: not kubeconfig_stat.stat.exists

    # Создаем основное рабочее пространство
    - name: Create namespace "ns"
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_file }}"
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: ns

    # Создаем секрет для авторизации в Yandex Cloud
    - name: Create secret "yc-auth" in namespace ns
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_file }}"
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: yc-auth
            namespace: ns
          data:
            # Содержимое файла .authorized_key.json будет закодировано в Base64
            authorized-key: "{{ lookup('ansible.builtin.file', '.authorized_key.json') | b64encode }}"
          type: Opaque

    # Добавляем репозиторий Helm для external-secrets
    - name: Add external-secrets Helm repository
      kubernetes.core.helm_repository:
        name: external-secrets
        repo_url: https://charts.external-secrets.io

    # Добавляем репозиторий Helm для ingress-nginx
    - name: Add ingress-nginx Helm repository
      kubernetes.core.helm_repository:
        name: ingress-nginx
        repo_url: https://kubernetes.github.io/ingress-nginx

    # Обновляем репозитории Helm
    - name: Update Helm repository "external-secrets"
      kubernetes.core.helm_repository:
        name: stable
        state: update

    - name: Update Helm repository "ingress-nginx"
      kubernetes.core.helm_repository:
        name: stable
        state: update

    # Устанавливаем External-Secrets через Helm
    - name: Install External-Secrets Helm Chart
      kubernetes.core.helm:
        kubeconfig: "{{ kubeconfig_file }}"
        release_name: external-secrets
        chart_ref: "stable/external-secrets"
        namespace: external-secrets
        create_namespace: true

    # Устанавливаем Nginx Ingress Controller через Helm
    - name: Install ingress-nginx Helm Chart
      kubernetes.core.helm:
        kubeconfig: "{{ kubeconfig_file }}"
        release_name: ingress-nginx
        chart_ref: "stable/ingress-nginx"
        namespace: ns
        create_namespace: false
        values:
          controller:
            extraArgs:
              default-ssl-certificate: "ns/k8s-secret"

    # Клонируем репозиторий с манифестами Prometheus
    - name: Clone kube-prometheus repository
      ansible.builtin.git:
        repo: "https://github.com/prometheus-operator/kube-prometheus.git"
        dest: "{{ playbook_dir }}/k8s/kube-prometheus"
        version: "v0.14.0"
        force: true

    # Применяем базовые манифесты Prometheus
    - name: Apply kube-prometheus setup manifests (server-side apply)
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_file }}"
        state: present
        src: "{{ item.path }}"
        server_side: true
      loop: "{{ lookup('ansible.builtin.find', { 'paths': prometheus_manifests_dir ~ '/setup', 'patterns': '*.yaml' }) }}"
      loop_control:
        label: "{{ item.path }}"

    # Ожидаем создания всех CRD
    - name: Wait for all CustomResourceDefinitions to be established
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_file }}"
        api_version: apiextensions.k8s.io/v1
        kind: CustomResourceDefinition
      register: crd_info
      until: >
        (crd_info.resources | length > 0) and
        ((crd_info.resources | map(attribute='status.conditions')
           | select('json_query', "[?type=='Established' && status=='True']")
           | list | length) == (crd_info.resources | length))
      retries: 30
      delay: 10

    # Применяем оставшиеся манифесты Prometheus
    - name: Apply remaining kube-prometheus manifests
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_file }}"
        state: present
        src: "{{ item.path }}"
      loop: "{{ lookup('ansible.builtin.find', {'paths': prometheus_manifests_dir, 'patterns': '*.yaml', 'excludes': 'setup/**'}) }}"
      loop_control:
        label: "{{ item.path }}"

    # Ищем все манифесты приложения (у меня они в каталоге k8s, но в репозитории - примеры в k8s/.nginx)
    - name: Find application manifest files (excluding kube-prometheus directory)
      ansible.builtin.find:
        paths: "{{ app_manifests_dir }}"
        patterns: "*.yaml"
        excludes: ["kube-prometheus/**", ".nginx/**"]
      register: app_manifest_files

    # Применяем найденные манифесты
    - name: Apply application manifests
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_file }}"
        state: present
        src: "{{ item.path }}"
      loop: "{{ app_manifest_files.files }}"
      loop_control:
        label: "{{ item.path }}"
