name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      # Шаг 1: Клонирование репозитория
      - name: Checkout repository
        uses: actions/checkout@v3

      # Шаг 2: Настройка Docker Buildx для современных возможностей сборки
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Шаг 3: Аутентификация в Yandex Container Registry
      - name: Login to Container Registry
        run: |
          echo "${{ secrets.YC_CR_TOKEN }}" | docker login --username iam --password-stdin cr.yandex

      # Шаг 4: Сборка и отправка Docker-образа
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: ./container
          file: ./container/Dockerfile
          push: true
          # Здесь переменная secrets.YC_REGISTRY_ID содержит ID реестра, а
          # my-test-app – имя образа; tag может быть "latest" или версионным.
          tags: cr.yandex/${{ secrets.YC_REGISTRY_ID }}/my-test-app:latest
          # cache-from: type=gha
          # cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Kubernetes
    needs: build
    runs-on: ubuntu-latest
    env:
      KUBECONFIG: ${{ github.workspace }}/kubeconfig.yaml
    steps:
      # Шаг 1: Клонирование репозитория (если требуется для доступа к манифестам)
      - name: Checkout repository
        uses: actions/checkout@v3

      # Шаг 2: Установка kubectl – клиент для управления кластером Kubernetes
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.29.0'  # выберите версию, соответствующую вашему кластеру

      # Шаг 3: Конфигурация доступа к вашему Kubernetes кластеру
      # Здесь предполагается, что содержимое kubeconfig вы храните в секрете с именем KUBE_CONFIG
      - name: Configure kubeconfig
        run: |
          printf "%b" "${{ secrets.KUBE_CONFIG }}" > kubeconfig.yaml
          kubectl config use-context default --kubeconfig=$KUBECONFIG
          kubectl get namespace --kubeconfig=$KUBECONFIG

      # Шаг 4: Создание namespace (если требуется)
      - name: Create namespace ns
        run: |
          kubectl apply -f - <<EOF
          apiVersion: v1
          kind: Namespace
          metadata:
            name: ns
          EOF

      # Шаг 4: Обновление приложения в кластере (например, обновление образа в Deployment)
      - name: Deploy new image to Kubernetes
        run: |
          kubectl set image deployment/nginx-deployment \
            nginx=cr.yandex/${{ secrets.YC_REGISTRY_ID }}/my-test-app:latest \
            --namespace=ns --kubeconfig=$KUBECONFIG
